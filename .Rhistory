flights_factors_with_err <- flights_factors_with_err %>%
add_residuals(forrest) %>%
rename(resid_rm = resid)
flights_factors <- flights_factors %>%
add_residuals(forrest) %>%
rename(resid_rm = resid)
flights_factors_with_err <- flights_factors %>%
add_residuals(forrest) %>%
rename(resid_rm = resid)
ggplot(flights_factors_with_err, aes(resid_rm)) +
geom_histogram(binwidth = 1)
ggplot(flights_factors_with_err, aes(arr_delay, resid_rm)) +
geom_point()
library(broom)
glance(model_lm_dep_delay)
glance(forrest)
library(nycflights13)
source('~/Descargas/rcourse/explore_flights.R')
library(nycflights13)
ggplot(sim1, aes(x, y)) +
geom_point()
ggplot(sim1, aes(x, y)) +
geom_point() +
xlim(0, 11) +
ylim(0, 30)
sim1_mod <- lm(y ~ x, data = sim1)
summary(sim1_mod)
sim1_coef <- coef(sim1_mod)
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(intercept = sim1_coef[1], slope = sim1_coef[2], color = "red")
sim1 <- sim1 %>%
add_residuals(sim1_mod)
ggplot(sim1, aes(resid)) +
geom_histogram(binwidth = 0.5)
ggplot(sim1, aes(x, resid)) +
geom_point()
ggplot(sim3, aes(x1, y)) +
geom_point(aes(colour = x2))
ggplot(sim3, aes(x1, y)) +
geom_point() +
facet_grid(~x2)
mod1 <- lm(y ~ x1 + x2, data = sim3)
mod2 <- lm(y ~ x1 * x2, data = sim3)
summary(mod1)
summary(mod2)
anova(mod1, mod2)
grid <- sim3 %>%
data_grid(x1, x2) %>%
gather_predictions(mod1, mod2)
ggplot(sim3, aes(x1, y, colour = x2)) +
geom_point() +
geom_line(data = grid, aes(y = pred)) +
facet_wrap(~ model)
sim3 <- sim3 %>%
gather_residuals(mod1, mod2)
ggplot(sim3, aes(x1, resid, colour = x2)) +
geom_point() +
facet_grid(model ~ x2)
flights = as_data_frame(flights)
ggplot(flights) +
geom_point(aes(dep_delay, arr_delay))
?anova
anova(mod1)
flights_factors <- flights %>%
select(month, day, hour, minute, dep_delay,
arr_delay, origin, carrier, air_time, distance) %>%
na.omit()
model_lm_all = lm(arr_delay ~ ., flights_factors)
summary(model_lm_all)
anova(model_lm_all)
flights_factors_with_err <- flights_factors %>%
add_residuals(model_lm_all) %>%
rename(resid_lm_all = resid)
ggplot(flights_factors_with_err, aes(resid_lm_all)) +
geom_histogram(binwidth = 1)
ggplot(flights_factors_with_err, aes(arr_delay, resid_lm_all)) +
geom_point()
model_lm_dep_delay = lm(arr_delay ~ dep_delay, flights)
summary(model_lm_dep_delay)
anova(model_lm_dep_delay, model_lm_all)
flights_factors_with_err <- flights_factors_with_err %>%
add_residuals(model_lm_dep_delay) %>%
rename(resid_lm_dep_delay = resid)
ggplot(flights_factors_with_err, aes(resid_lm_dep_delay)) +
geom_histogram(binwidth = 1)
ggplot(flights_factors_with_err, aes(arr_delay, resid_lm_dep_delay)) +
geom_point()
library(broom)
glance(model_lm_dep_delay)
?iris
library(iris)
data(iris)
iris <- as_data_frame(iris)
?iris
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, color = Species))
ggplot(iris) +
geom_point(aes(Petal.Length, Petal.Width, color = Species))
model_sepal = lm(Sepal.Length ~ ., iris)
summary(model_sepal)
model_petal = lm(Petal.Length ~ ., iris)
summary(model_petal)
model_species_forrest = randomForest(Species ~ ., iris,
do.trace = TRUE, importance=TRUE, ntree=2000)
varImpPlot(model_species_forrest)
iris_predictions <- iris %>%
add_predictions(model_species_forrest)
iris_train <- iris %>%
sample_frac(0.6)
iris_test <-iris  %>%
anti_join(iris_train)
model_species_forrest_train = randomForest(Species ~ ., iris_train,
do.trace = TRUE, importance=TRUE, ntree=2000)
iris_test <- iris_test %>%
add_predictions(model_species_forrest_train)
sum(iris_test$Species == iris_test$pred) / nrow(iris_test)
library(party)
tree <- ctree(Species ~ .,
#              controls = ctree_control(mincriterion = 0.00001),
iris)
plot(tree)
library(help = "datasets")
library(tidyverse)
library(titanic)
train = as_data_frame(titanic_train)
test = as_data_frame(titanic_test)
ggplot(train) +
geom_bar(aes(factor(Survived)))
train <- train %>%
mutate(predSurvived = 0)
table(train$predSurvived, train$Survived)
sum(train$predSurvived == train$Survived) / nrow(train)
ggplot(train) +
geom_bar(aes(factor(Survived))) +
facet_wrap(~Sex)
train <- train %>%
mutate(predSurvived = ifelse(Sex == "male", 0, 1))
table(train$predSurvived, train$Survived)
sum(train$predSurvived == train$Survived) / nrow(train)
train <- train %>%
mutate(Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age),
predSurvived = ifelse(Sex == "female", 1, 0),
predSurvived = ifelse(Age < 7, 1, predSurvived))
table(train$predSurvived, train$Survived)
sum(train$predSurvived == train$Survived) / nrow(train)
library(tidyverse)
library(titanic)
train = as_data_frame(titanic_train)
test = as_data_frame(titanic_test)
train_factor <- train %>%
mutate(Survived = factor(Survived),
Sex = factor(Sex),
Embarked = factor(Embarked)) %>%
select(-Name, -Ticket, -Cabin)
classifier <- naiveBayes(Survived ~ Sex + Age, train_factor)
library(e1071)
classifier <- naiveBayes(Survived ~ Sex + Age, train_factor)
print(classifier)
train_factor <- train_factor %>%
mutate(predSurvived = predict(classifier, train_factor, type = "class"))
table(train_factor$predSurvived, train_factor$Survived)
sum(train_factor$predSurvived == train_factor$Survived) / nrow(train_factor)
library(tidyverse)
library(randomForest)
library(titanic)
library(nycflights13)
library(modelr)
train = as_data_frame(titanic_train)
test = as_data_frame(titanic_test)
tree_overfitting <- ctree(Survived ~ .,
controls = ctree_control(mincriterion = 0.0001),
train_factor %>% select(-predSurvived))
tree_overfitting <- ctree(Survived ~ .,
controls = ctree_control(mincriterion = 0.0001),
train_factor %>% select(-predSurvived))
plot(tree_overfitting)
tree <- ctree(Survived ~ ., train_factor %>% select(-predSurvived))
train_factor <- train %>%
mutate(Survived = factor(Survived),
Sex = factor(Sex),
Embarked = factor(Embarked)) %>%
select(-Name, -Ticket, -Cabin)
tree_overfitting <- ctree(Survived ~ .,
controls = ctree_control(mincriterion = 0.0001),
train_factor %>% select(-predSurvived))
tree_overfitting <- ctree(Survived ~ .,
controls = ctree_control(mincriterion = 0.0001),
train_factor)
plot(tree_overfitting)
tree <- ctree(Survived ~ ., train_factor)
plot(tree)
train_factor <- train_factor %>%
mutate(predSurvived = predict(tree, train_factor))
table(train_factor$predSurvived, train_factor$Survived)
sum(train_factor$predSurvived == train_factor$Survived) / nrow(train_factor)
train_factor <- train_factor %>%
mutate(predSurvived = predict(tree_overfitting, train_factor))
table(train_factor$predSurvived, train_factor$Survived)
sum(train_factor$predSurvived == train_factor$Survived) / nrow(train_factor)
install.packages("boot")
library(boot)
library(tidyverse)
flights <- as_data_frame(flights)
flights_factors <- flights %>%
select(month, day, hour, minute, dep_delay,
arr_delay, origin, carrier, air_time, distance) %>%
na.omit()
model_lm_all = lm(arr_delay ~ ., flights_factors)
library(nycflights13)
library(tidyverse)
flights <- as_data_frame(flights)
flights_factors <- flights %>%
select(month, day, hour, minute, dep_delay,
arr_delay, origin, carrier, air_time, distance) %>%
na.omit()
model_lm_all = lm(arr_delay ~ ., flights_factors)
model_lm_all
cv.lm(flights_factors, model_lm_all, m=10)
library(DAAG)
install.packages("DAAG")
cv.lm(flights_factors, model_lm_all, m=10)
library(DAAG)
cv.lm(flights_factors, model_lm_all, m=10)
model_lm_dep_delay = lm(arr_delay ~ dep_delay, flights)
cv <- cv.lm(flights, model_lm_dep_delay, m=5)
model_lm_dep_delay = lm(arr_delay ~ dep_delay, flights_factors)
cv <- cv.lm(flights_factors, model_lm_dep_delay, m=5)
summary(model_lm_dep_delay)
summery(flights_factors)
summarize(flights_factors)
summary(flights_factors)
cv <- cv.lm(flights_factors, model_lm_dep_delay, m=5)
cv <- cv.lm(flights_factors, model_lm_dep_delay, m=3)
install.packages("cvTools")
library(cvTools)
cv <- cvFit(model_lm_dep_delay, K=5)
cv <- cvFit(model_lm_dep_delay, flights_factors$arr_delay, K=5)
cv <- cvFit(model_lm_dep_delay, y=flights_factors$arr_delay, K=5)
cv <- cvFit(model_lm_dep_delay, data=flights_factors, y=flights_factors$arr_delay, K=5)
cv
symmary(cv)
summary(cv)
cv <- cvFit(model_lm_dep_delay, data=flights_factors, y=flights_factors$arr_delay)
cv_all <- cvFit(model_lm_all, data=flights_factors, y=flights_factors$arr_delay)
cv_dep_delay
cv_dep_delay <- cvFit(model_lm_dep_delay, data=flights_factors, y=flights_factors$arr_delay)
cv_all
cv_dep_delay
library(titanic)
train = as_data_frame(titanic_train)
test = as_data_frame(titanic_test)
train_factor <- train %>%
mutate(Survived = factor(Survived),
Sex = factor(Sex),
Embarked = factor(Embarked)) %>%
select(-Name, -Ticket, -Cabin)
tree_overfitting <- ctree(Survived ~ .,
controls = ctree_control(mincriterion = 0.0001),
train_factor)
plot(tree_overfitting)
library(party)
library(party)
tree_overfitting <- ctree(Survived ~ .,
controls = ctree_control(mincriterion = 0.0001),
train_factor)
plot(tree_overfitting)
tree <- ctree(Survived ~ ., train_factor)
plot(tree)
cv_tree_overfitting <- cvFit(tree_overfitting, data=train_factor, y=train_factor$Survived)
cv_tree_overfitting <- cvFit(tree_overfitting, data=train_factor, y=train_factor$Survived)
cv_tree <- cvFit(tree, data=train_factor, y=train_factor$Survived)
model_lm_small = lm(arr_delay ~ ., flights_factors %>% sample_n(10))
summary(model_lm_small)
model_lm_small = lm(arr_delay ~ dep_delay, flights_factors %>% sample_n(10))
summary(model_lm_small)
summary(model_lm_dep_delay)
cv_small <- cvFit(model_lm_small, data=flights_factors, y=flights_factors$arr_delay)
cv_small
cv_dep_delay
cv_dep_delay <- cvFit(model_lm_dep_delay, data=flights_factors, y=flights_factors$arr_delay, R=10)
cv_small <- cvFit(model_lm_small, data=flights_factors, y=flights_factors$arr_delay, R=10)
cv_small
cv_dep_delay
model_lm_small = lm(arr_delay ~ dep_delay, flights_factors %>% sample_n(10))
summary(model_lm_small)
summary(model_lm_dep_delay)
model_lm_small = lm(arr_delay ~ dep_delay, flights_factors %>% sample_n(10))
summary(model_lm_small)
summary(model_lm_dep_delay)
set.seed(1)
model_lm_small = lm(arr_delay ~ dep_delay, flights_factors %>% sample_n(10))
summary(model_lm_small)
summary(model_lm_dep_delay)
cv_dep_delay <- cvFit(model_lm_dep_delay, data=flights_factors, y=flights_factors$arr_delay, R=10)
cv_small <- cvFit(model_lm_small, data=flights_factors, y=flights_factors$arr_delay, R=5)
cv_small
cv_dep_delay
cv_dep_delay <- cvFit(model_lm_dep_delay, data=flights_factors, y=flights_factors$arr_delay, R=5, cost = rtmspe)
cv_small <- cvFit(model_lm_small, data=flights_factors, y=flights_factors$arr_delay, R=5, cost = rtmspe)
cv_small
cv_dep_delay
?cv.glm
model_lm_all = lm(arr_delay ~ ., flights_factors)
model_lm_dep_delay = lm(arr_delay ~ dep_delay, flights_factors)
summary(model_lm_all)
summary(model_lm_dep_delay)
model_lm_no_day = lm(arr_delay ~ ., flights_factors %>% select(-day))
summary(model_lm_all)
summary(model_lm_no_day)
cv_all <- cvFit(model_lm_all, data=flights_factors, y=flights_factors$arr_delay)
cv_no_day <- cvFit(model_lm_no_day, data=flights_factors %>% select(-day), y=flights_factors$arr_delay)
cv_all
cv_no_day
model_lm_all = lm(arr_delay ~ ., flights_factors)
model_lm_no_day = lm(arr_delay ~ ., flights_factors %>% select(-day, -minute))
summary(model_lm_all)
summary(model_lm_no_day)
cv_all <- cvFit(model_lm_all, data=flights_factors, y=flights_factors$arr_delay)
cv_no_day <- cvFit(model_lm_no_day, data=flights_factors %>% select(-day, -minute), y=flights_factors$arr_delay)
cv_all
cv_no_day
model_lm_all = lm(arr_delay ~ ., flights_factors)
model_lm_no_day = lm(arr_delay ~ ., flights_factors %>% select(-day, -minute, -carrier))
summary(model_lm_all)
summary(model_lm_no_day)
cv_all <- cvFit(model_lm_all, data=flights_factors, y=flights_factors$arr_delay)
cv_no_day <- cvFit(model_lm_no_day, data=flights_factors %>% select(-day, -minute, carrier), y=flights_factors$arr_delay)
cv_all
cv_no_day
model_lm_all = lm(arr_delay ~ ., flights_factors)
model_lm_no_day = lm(arr_delay ~ dep_delay, flights_factors %>% select(-day, -minute, -carrier))
summary(model_lm_all)
summary(model_lm_no_day)
cv_all <- cvFit(model_lm_all, data=flights_factors, y=flights_factors$arr_delay)
cv_no_day <- cvFit(model_lm_no_day, data=flights_factors %>% select(-day, -minute, carrier), y=flights_factors$arr_delay)
cv_all
cv_no_day
plot(cv_all)
model_lm_all = lm(arr_delay ~ ., flights_factors)
model = lm(arr_delay ~ dep_delay, flights_factors)
summary(model_lm_all)
summary(model)
cv_all <- cvFit(model_lm_all, data=flights_factors, y=flights_factors$arr_delay, R=5)
cv <- cvFit(model, data=flights_factors, y=flights_factors$arr_delay, R=5)
plot(cv_all)
plot(cv)
dotplot(cv_all)
dotplot(cv)
cv_all <- cvTool(model_lm_all, data=flights_factors, y=flights_factors$arr_delay, R=5)
cv <- cvTool(call, data = flights_factors, y = flights_factors$arr_delay,
folds = folds, costArgs = list(trim = 0.1))
call <- call("lm", formula = arr_delay ~ .)
folds <- cvFolds(nrow(flights_factors), K = 5, R = 10)
cv <- cvTool(call, data = flights_factors, y = flights_factors$arr_delay,
folds = folds, costArgs = list(trim = 0.1))
cv <- cvTool(call, data = flights_factors, y = flights_factors$arr_delay,
folds = folds)
cv <- cvTool(call, data = flights_factors, y = flights_factors$arr_delay,
folds = folds)
cv
summary(cv)
data(iris)
iris <- as_data_frame(iris)
model_sepal = lm(Sepal.Length ~ ., iris)
summary(model_sepal)
model_all = lm(Sepal.Length ~ ., iris)
summary(model_sepal)
model_pl = lm(Sepal.Length ~ Petal.Length, iris)
summary(model_pl)
cv_all = cv.glm(iris, model_all)
plot(cv_all)
summary(cv_all)
cv_all
cv_all = cvFit(model_all, data=iris, y=iris$Sepal.Length, R=5)
cv_all
cv_all = cvFit(model_pl, data=iris, y=iris$Sepal.Length, R=5)
cv_pl
cv_pl = cvFit(model_pl, data=iris, y=iris$Sepal.Length, R=5)
cv_pl
plot(cv_all)
cv_all = cvFit(model_all, data=iris, y=iris$Sepal.Length, R=10)
plot(cv_all)
cv_pl = cvFit(model_pl, data=iris, y=iris$Sepal.Length, R=10)
plot(cv_pl)
dotplot(cv_all)
cv_all
summary(model_sepal)
summary(model_pl)
mtcars
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit[i] = glm(mpg ~ poly(hp, i), mtcars)
cv.error[i] = cv.glm(mtcars, glm.fit[i])$delta[1]
}
cv.error
?glm
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit[i] = glm(mpg ~ poly(hp, i), mtcars, family = gaussian)
cv.error[i] = cv.glm(mtcars, glm.fit[i])$delta[1]
}
cv.error
mtcars = as_data_frame(mtcars)
library(tidyverse)
mtcars = as_data_frame(mtcars)
cv.error = rep(0, 5)
i=1
glm.fit[i] = glm(mpg ~ poly(hp, i), family = gaussian)
glm.fit[i] = glm(mpg ~ poly(hp, i), mtcars)
glm.fit[i] = glm(mpg ~ poly(hp, i), family = gaussian, mtcars)
glm.fit[i] = glm(mpg ~ poly(hp, i), family = gaussian, data = mtcars)
poly(hp, i)
glm(mpg ~ poly(hp, i), family = gaussian, data = mtcars)
glm.fit = rep(0, 5)
for (i in 1:5) {
glm.fit[i] = glm(mpg ~ poly(hp, i), family = gaussian, data = mtcars)
cv.error[i] = cv.glm(mtcars, glm.fit[i])$delta[1]
}
library(boot)
cv.error = rep(0, 5)
glm.fit = rep(0, 5)
for (i in 1:5) {
glm.fit[i] = glm(mpg ~ poly(hp, i), family = gaussian, data = mtcars)
cv.error[i] = cv.glm(mtcars, glm.fit[i])$delta[1]
}
cv.error
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(mpg ~ poly(hp, i), family = gaussian, data = mtcars)
cv.error[i] = cv.glm(mtcars, glm.fit)$delta[1]
}
cv.error
model1 = glm(mpg ~ poly(hp, i), family = gaussian, data = mtcars)
model1 = glm(mpg ~ poly(hp, 1), family = gaussian, data = mtcars)
model2 = glm(mpg ~ poly(hp, 2), family = gaussian, data = mtcars)
model3 = glm(mpg ~ poly(hp, 3), family = gaussian, data = mtcars)
model4 = glm(mpg ~ poly(hp, 4), family = gaussian, data = mtcars)
model5 = glm(mpg ~ poly(hp, 5), family = gaussian, data = mtcars)
summary(model1)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
library(broom)
glance(model1)
?cv.lm
cv.error
summary(model5)
summary(model4)
summary(model3)
summary(model2)
summary(model1)
library(titanic)
train <- as_data_frame(titanic_train)
library(tidyverse)
library(titanic)
train <- as_data_frame(titanic_train)
ggplot(train) +
geom_bar(aes(factor(Survived))) +
facet_wrap(~Sex)
model_lr_sex <- glm(factor(Survived) ~ factor(Sex), train, family = "binomial")
summary(model_lr_sex)
exp(1) / (1 + exp(1))
exp(1-2.5) / (1 + exp(1-2.5))
train_prob <- predict(model_lr_sex, type = "response")
train_prob_df <- tibble(train_prob)
ggplot(train_prob_df) +
geom_histogram(aes(train_prob))
treshold = 0.5
train_pred <- ifelse(train_prob > treshold, 1, 0)
sum(train_pred == train$Survived) / nrow(train)
sum(train_pred == 1 & train$Survived == 1) / sum(train_pred == 1)
sum(train$Survived == 1 & train_pred == 1) / sum(train$Survived == 1)
ggplot(train) +
geom_boxplot(aes(factor(Survived), Age))
ggplot(train) +
geom_bar(aes(factor(Survived))) +
facet_wrap(~factor(Pclass))
train <- train %>%
mutate(Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age))
model_lr_sex_age_class <- glm(factor(Survived) ~ factor(Sex) + Age + factor(Pclass), train, family = "binomial")
summary(model_lr_sex_age_class)
train_prob <- predict(model_lr_sex_age_class, type = "response")
train_prob_df <- tibble(train_prob)
ggplot(train_prob_df) +
geom_histogram(aes(train_prob))
treshold = 0.5 #0.1 0.9
train_pred <- ifelse(train_prob > treshold, 1, 0)
sum(train_pred == train$Survived) / nrow(train)
sum(train_pred == 1 & train$Survived == 1) / sum(train_pred == 1)
sum(train$Survived == 1 & train_pred == 1) / sum(train$Survived == 1)
install.packages("OptimalCutpoints")
library(OptimalCutpoints)
optimal.cutpoints("SpEqualSe")
?optimal.cutpoints
?boot
library(boot)
boot(iris$Sepal.Length, mean, R=1000)
?boot
boot.fn = function (data, index) {
return coefficients(lm(mpg ~ hp, data = data, subset = index))
}
boot(mtcars, boot.fn, R=1000)
boot.fn = function (data, index) {
return coefficients(lm(mpg ~ hp, data = data, subset = index))
}
boot.fn = function (data, index) {
return(coef(lm(mpg ~ hp, data = data, subset = index)))
}
boot(mtcars, boot.fn, R=1000)
coef(lm(mpg ~ hp,mtcars))
